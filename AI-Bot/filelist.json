{
  "/index.js": "// index.js\nrequire(\"dotenv\").config();\nconst TwoBladeBot = require(\"./Bot/bot\");\n\n(async () => {\n  const bot = new TwoBladeBot(\"https://twoblade.com\");\n  const username = process.env.TB_USERNAME;\n  const password = process.env.TB_PASSWORD;\n\n  try {\n    await bot.start(username, password);\n    console.log(\"Bot connected! version: 1.0.0\");\n\n    bot.on(\"ready\", () => {\n      setTimeout(() => {\n        bot.sendMessage(\n          \"Hello everyone, I'm Gemini\\n\"\n        );\n      }, 3000);\n    });\n\n    bot.on(\"message\", msg => {\n      if (typeof msg !== 'object' || !msg.text) return;\n\n      const frameWidth = 60;\n\n      const formatLine = (label, value) => {\n        const content = `${label}: '${value}',`;\n        const padding = frameWidth - content.length - 3;\n        return `| ${content}${' '.repeat(Math.max(padding, 0))}|`;\n      };\n\n      const shortText = msg.text.length > 35 ? msg.text.substring(0, 35) + \"...\" : msg.text;\n      const border = '='.repeat(frameWidth);\n\n      console.log(\" \");\n      console.log(border);\n      console.log(\"|   new message :\".padEnd(frameWidth - 1) + \"|\");\n      console.log(formatLine(\"  id\", msg.id));\n      console.log(formatLine(\"  text\", shortText));\n      console.log(formatLine(\"  fromUser\", msg.fromUser));\n      console.log(border);\n      console.log(\" \");\n    });\n\n    bot.on(\"disconnect\", () => {\n      console.log(\"Bot disconnected!\");\n    });\n\n  } catch (err) {\n    console.error(\"Something went wrong, please contact jon#twoblade.com\", err);\n  }\n})();",
  
  "/Bot/ai.js": "require('dotenv').config();\nconst { GoogleGenerativeAI } = require('@google/generative-ai');\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n\nasync function handleAI(bot, data) {\n  const text = (data.text || \"\").toLowerCase().trim();\n  const triggerWords = [\"@bot\", \"bot\"];\n  const mentioned = triggerWords.some(trigger => text.startsWith(trigger.toLowerCase()));\n\n  if (!mentioned) return;\n\n  try {\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash-latest\" });\n\n    const prompt = `\nYou are JonBot, a chill and playful AI created by @your_username\nYou're a funny bot.\n\nUser input:\n\"${data.text}\"\n`;\n\n    const result = await model.generateContent(prompt);\n    const reply = result?.candidates?.[0]?.output || \"Sorry, I couldn't come up with a response.\";\n\n    bot.sendMessage(reply);\n  } catch (err) {\n    console.error(\"Bot error:\", err);\n    bot.sendMessage(\"something went wrong!\");\n  }\n}\n\nmodule.exports = { handleAI };",
  
  "/Bot/bot.js": "const axios = require(\"axios\").default;\nconst { io } = require(\"socket.io-client\");\nconst tough = require(\"tough-cookie\");\nconst EventEmitter = require(\"events\");\nconst { handleAI } = require(\"./ai\");\n\nconst cf_clearance = process.env.CF_CLEARANCE;\n\nclass TwoBladeBot extends EventEmitter {\n  constructor(baseUrl = \"https://twoblade.com\") {\n    super();\n    this.baseUrl = baseUrl;\n    this.username = null;\n    this.password = null;\n    this.cookies = new tough.CookieJar();\n    this.socket = null;\n    this.authToken = null;\n    this.connected = false;\n    this.messageCounts = {};\n    this.startedAt = null;\n  }\n\n  async login(username, password) {\n    this.username = username;\n    this.password = password;\n\n    const url = `${this.baseUrl}/login`;\n    const headers = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"User-Agent\": \"Mozilla/5.0\",\n      Referer: `${this.baseUrl}/login`,\n      Origin: this.baseUrl,\n      Cookie: `cf_clearance=${cf_clearance}`,\n    };\n\n    const data = new URLSearchParams();\n    data.append(\"username\", username);\n    data.append(\"password\", password);\n\n    const response = await axios.post(url, data.toString(), {\n      headers,\n      withCredentials: true,\n    });\n\n    const setCookies = response.headers[\"set-cookie\"] || [];\n\n    let authToken = null;\n    for (const rawCookie of setCookies) {\n      this.cookies.setCookieSync(rawCookie, this.baseUrl);\n      const cookie = tough.Cookie.parse(rawCookie);\n      if (cookie?.key === \"auth_token\") {\n        authToken = cookie.value;\n      }\n    }\n\n    if (!authToken) {\n      throw new Error(\"auth_token cookie not found in login response\");\n    }\n\n    this.authToken = authToken;\n    this.emit(\"login\", this.username);\n  }\n\n  async connect() {\n    if (!this.authToken) {\n      throw new Error(\"Must login before connecting\");\n    }\n\n    const cookieString = `cf_clearance=${cf_clearance}; auth_token=${this.authToken}`;\n\n    this.socket = io(this.baseUrl, {\n      path: \"/ws/socket.io\",\n      transports: [\"websocket\"],\n      auth: { token: this.authToken },\n      extraHeaders: {\n        Cookie: cookieString,\n        Origin: this.baseUrl,\n      },\n    });\n\n    this.socket.on(\"connect\", () => {\n      this.connected = true;\n      this.emit(\"ready\");\n      this.startedAt = Date.now();\n    });\n\n    this.socket.on(\"disconnect\", () => {\n      this.connected = false;\n      this.emit(\"disconnect\");\n    });\n\n    this.socket.on(\"connect_error\", (err) => {\n      this.emit(\"error\", err);\n    });\n\n    this.socket.on(\"users_count\", (count) => {\n      this.emit(\"users_count\", count);\n    });\n\n    this.socket.on(\"recent_messages\", (messages) => {\n      this.emit(\"recent_messages\", messages);\n    });\n\n    this.socket.on(\"message\", (data) => {\n      this.emit(\"message\", data);\n\n      const user = data.fromUser || \"Unknown\";\n      if (!this.messageCounts[user]) {\n        this.messageCounts[user] = 0;\n      }\n      this.messageCounts[user]++;\n\n      if (!data?.text || typeof data.text !== \"string\") return;\n\n      handleAI(this, data);\n    });\n  }\n\n  sendMessage(text) {\n    if (!this.connected || !this.socket) {\n      throw new Error(\"Not connected to socket\");\n    }\n    this.socket.emit(\"message\", text);\n  }\n\n  async start(username, password) {\n    await this.login(username, password);\n    await this.connect();\n  }\n\n  destroy() {\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  }\n}\n\nmodule.exports = TwoBladeBot;"
}
